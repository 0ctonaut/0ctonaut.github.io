<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcode-135</title>
    <link href="/2025/07/16/leetcode-135/"/>
    <url>/2025/07/16/leetcode-135/</url>
    
    <content type="html"><![CDATA[<h1 id="Institution"><a href="#Institution" class="headerlink" title="Institution"></a>Institution</h1><p><a href="https://leetcode.com/problems/candy/description">有这么一道题</a>，分糖果，每个孩子至少一颗，分比旁边孩子更高的孩子要分到更多的糖果，问给所有的孩子最少分几颗。</p><p>看到这道题第一眼，求一个“最少”的数量，很有动态规划的味道。继续分析：</p><ul><li>对于<strong>重叠子问题</strong>，每个孩子的状态是独立的，仅依赖于左右邻居的值，不存在大量子问题被重复计算；</li><li>对于<strong>无后效性</strong>，也就似是当前决策不会影响到后面的状态转移，本题部分满足，但是不太对劲，因为当前$i$孩子分到的糖果并不能仅依靠$i-1$来决定，还会受到$i+1$的影响，也就是说当前决策依赖未来信息，存在<strong>后效性</strong>；</li><li>对于<strong>最优子结构</strong>，如果能确保每个孩子的最优糖果数是基于他和邻居之间子结构的最优安排，而整条队伍的最优解就是所有局部子问题的最优解之和，本题是具有最优子结构的。</li></ul><p>由于不满足<strong>重叠子问题</strong>和<strong>无后效性</strong>，我放弃了动态规划的解法。</p><hr><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><p>我随手列了几种情况，发现在分数数组<code>ratings</code>子串递增&#x2F;递减的时候才需要考虑相邻孩子的分数关系，相等的时候可以直接降为1。所以直觉告诉我“递增&#x2F;递减”可以做文章，既然<code>ratings</code>递增时糖果需要递增，而递减时糖果也需要递减，那为何不从后往前遍历，把“递减”转化为“递增”？</p><p>结果是碰巧撞对了，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; ratings)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = ratings.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">candies</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i<span class="hljs-number">-1</span>])<br>            &#123;<br>                candies[i] = candies[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-2</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i<span class="hljs-number">+1</span>])<br>            &#123;<br>                <span class="hljs-keyword">while</span>(candies[i] &lt;= candies[i<span class="hljs-number">+1</span>])<br>                    ++candies[i];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        &#123;<br>            ret += candies[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>改良：</p><p>完全不用while</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i<span class="hljs-number">+1</span>])<br>&#123;<br>    <span class="hljs-keyword">while</span>(candies[i] &lt;= candies[i<span class="hljs-number">+1</span>])<br>                    ++candies[i];<br>&#125;<br><br><span class="hljs-comment">// =&gt;</span><br><br><span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i<span class="hljs-number">+1</span>] &amp;&amp; candies[i] &lt;= candies[i<span class="hljs-number">+1</span>])<br>&#123;<br>    candies[i] = candies[i<span class="hljs-number">+1</span>] + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后还发现，正向遍历检测递增和反向遍历检测递减其实互不影响，只有在$i-m$<del>$i$递增，且$i$</del>$i+n$递减这种时候会有一个重叠的索引$i$，那么可以在一个循环中同时推进双边的遍历，然后在判断条件中防止被后写入的糖果值覆盖：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; ratings)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = ratings.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">candies</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br>        &#123;<br>            <span class="hljs-type">int</span> j = n - i - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i<span class="hljs-number">-1</span>] &amp;&amp; candies[i] &lt;= candies[i<span class="hljs-number">-1</span>])<br>            &#123;<br>                candies[i] = candies[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(ratings[j] &gt; ratings[j<span class="hljs-number">+1</span>] &amp;&amp; candies[j] &lt;= candies[j<span class="hljs-number">+1</span>])<br>            &#123;<br>                candies[j] = candies[j<span class="hljs-number">+1</span>] + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">accumulate</span>(candies.<span class="hljs-built_in">begin</span>(), candies.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/26/hello-world/"/>
    <url>/2025/04/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
